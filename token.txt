1,1:3,K_TYPE
int
2,1:5,ID
a
3,1:7,ASSIGN
=
4,1:10,NUM
50
5,1:11,SEMI
;
6,2:6,K_TYPE
double
7,2:8,ID
b
8,2:10,ASSIGN
=
9,2:15,NUM
0.56
10,2:16,SEMI
;
11,3:6,K_TYPE
double
12,3:8,ID
c
13,3:9,SEMI
;
14,4:2,K_IF
if
15,4:4,LPAREN
(
16,4:5,ID
a
17,4:7,GT
>
18,4:9,ID
b
19,4:10,RPAREN
)
20,4:12,LCURLYP
{
21,5:5,ID
c
22,5:7,ASSIGN
=
23,5:9,ID
a
24,5:11,PLUS
+
25,5:13,ID
b
26,5:14,SEMI
;
27,6:1,RCURLYP
}
28,6:6,K_ELSE
else
29,6:8,LCURLYP
{
30,7:5,ID
c
31,7:7,ASSIGN
=
32,7:9,ID
a
33,7:11,TIMES
*
34,7:13,ID
b
35,7:14,SEMI
;
36,8:1,RCURLYP
}
37,9:6,K_TYPE
double
38,9:8,ID
d
39,9:9,SEMI
;
40,10:1,ID
d
41,10:3,ASSIGN
=
42,10:5,ID
a
43,10:7,PLUS
+
44,10:9,ID
b
45,10:11,TIMES
*
46,10:13,ID
c
47,10:14,SEMI
;
48,11:5,K_WHILE
while
49,11:7,LPAREN
(
50,11:8,ID
a
51,11:10,GT
>
52,11:14,NUM
100
53,11:15,RPAREN
)
54,11:17,LCURLYP
{
55,12:7,K_TYPE
int
56,12:9,ID
e
57,12:11,ASSIGN
=
58,12:15,NUM
0xA
59,12:16,SEMI
;
60,13:5,ID
a
61,13:8,PA
+=
62,13:10,ID
e
63,13:11,SEMI
;
64,14:1,RCURLYP
}
65,13:1,END
$r
